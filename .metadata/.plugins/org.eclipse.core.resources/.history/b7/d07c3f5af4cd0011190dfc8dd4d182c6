package com.wwidesigner.geometry;

import java.io.File;
import java.io.PrintWriter;
import org.apache.commons.math3.complex.Complex;

import com.wwidesigner.geometry.Instrument;
import com.wwidesigner.geometry.InstrumentConfigurator;
import com.wwidesigner.geometry.bind.GeometryBindFactory;
import com.wwidesigner.geometry.calculation.SimpleTestConfigurator;
import com.wwidesigner.note.Tuning;
import com.wwidesigner.note.Fingering;
import com.wwidesigner.note.bind.NoteBindFactory;
import com.wwidesigner.util.BindFactory;
import com.wwidesigner.util.Constants.TemperatureType;
import com.wwidesigner.util.PhysicalParameters;

/**
 * @author Burton Patkau
 * 
 */
public class InstrumentImpedanceReport
{
	// Standard instrument, and its measured tuning.

	protected static String inputInstrumentXML = "com/wwidesigner/optimization/example/BP7.xml";
	protected static String inputTuningXML = "com/wwidesigner/optimization/example/BP7-tuning.xml";
	
	/**
	 * For the standard instrument, calculate the impedance for
	 * selected notes at the known fmax, where Imag(Z) == 0.
	 */
	public static void main(String[] args)
	{
		System.out.println("Hello world.")
		try
		{
			Instrument instrument = getInstrumentFromXml(inputInstrumentXML);
			Tuning tuning = getTuningFromXml(inputTuningXML);
			PhysicalParameters params = new PhysicalParameters(30.0, TemperatureType.C);
//			PrintWriter pw = new PrintWriter( System.out );
			
			Double fmax[]
				  = { 589.49699364,   665.95846589,   740.62596732,   790.25253027,
			          895.41223635,  1000.04547471,  1080.97410484,  1139.23859984,
			         1201.28218389,  1336.22103577,  1487.47285037,  1588.12692212,
			         1787.297483  ,  1992.58680484,  2045.42056261,  2233.64276274,
			         2433.04456904,   912.91065873};

			configureInstrument(instrument);

			for ( int i = 0; i < fmax.length; ++ i )
			{
				Fingering fingering = tuning.getFingering().get(i);
				Complex Z = instrument.calcZ(fmax[i],fingering,params);
				System.out.print(fmax[i]);
				System.out.print(Z.getReal());
				System.out.print(Z.getImaginary());
				System.out.println();
//				assertEquals("Imag(Z) is non-zero at known resonance.", Z.getImaginary(), 0.0, 0.0001);
			}
		}
		catch (Exception e)
		{
//			fail(e.getMessage());
			System.out.println(e.getMessage());
		}
	}

	protected static Instrument getInstrumentFromXml(String instrumentXML)
			throws Exception
	{
		BindFactory geometryBindFactory = GeometryBindFactory.getInstance();
		File inputFile = getInputFile(inputInstrumentXML, geometryBindFactory);
		Instrument instrument = (Instrument) geometryBindFactory.unmarshalXml(
				inputFile, true);

		return instrument;
	}

	protected static void configureInstrument(Instrument instrument)
	{
		InstrumentConfigurator instrumentConfig = new SimpleTestConfigurator();
		instrument.setConfiguration(instrumentConfig);

		// This unit-of-measure converter is called in setConfiguration(), but
		// is shown here to make it explicit. The method is efficient: it does
		// not redo the work.
		instrument.convertToMetres();
	}

	protected static Tuning getTuningFromXml(String tuningXML) throws Exception
	{
		BindFactory noteBindFactory = NoteBindFactory.getInstance();
		File inputFile = getInputFile(inputTuningXML, noteBindFactory);
		Tuning tuning = (Tuning) noteBindFactory.unmarshalXml(inputFile, true);

		return tuning;
	}

	/**
	 * This approach for get the input File is based on finding it in the
	 * classpath. The actual application will use an explicit file path - this
	 * approach will be unnecessary.
	 * 
	 * @param fileName
	 *            expressed as a package path.
	 * @param bindFactory
	 *            that manages the elements in the file.
	 * @return A file representation of the fileName, as found somewhere in the
	 *         classpath.
	 */
	protected static File getInputFile(String fileName, BindFactory bindFactory)
	{
		String inputPath = bindFactory.getPathFromName(fileName);
		File inputFile = new File(inputPath);

		return inputFile;
	}
}
